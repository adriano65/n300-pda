/*
 *  armboot - Startup Code for ARM920 CPU-core
 *
 *  Copyright (c) 2001	Marius Gröger <mag@sysgo.de>
 *  Copyright (c) 2002	Alex Züpke <azu@sysgo.de>
 *  Copyright (c) 2002	Gary Jennejohn <gj@denx.de>
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
 */

#define __STARTS 

#include <config.h>
#include <version.h>
#include <s3c2440.h>

/*
 *************************************************************************
 *
 * Jump vector table as in table 3.1 in [1]
 *
 *************************************************************************
 */
.syntax unified

#define CONFIG_GOFORCE4000_INIT

.globl _start
_start:	b       reset
		ldr	pc, _undefined_instruction
		ldr	pc, _software_interrupt
		ldr	pc, _prefetch_abort
		ldr	pc, _data_abort
		ldr	pc, _not_used
		ldr	pc, _irq
		ldr	pc, _fiq

_undefined_instruction:	.word undefined_instruction
_software_interrupt:	.word software_interrupt
_prefetch_abort:		.word prefetch_abort
_data_abort:			.word data_abort
_not_used:				.word not_used
_irq:					.word irq
_fiq:					.word fiq

.balignl 16, 0xdeadbeef


/*
 *************************************************************************
 *
 * Startup Code (reset vector)
 *
 * do important init only if we don't start from memory!
 * relocate armboot to ram
 * setup stack
 * jump to second stage
 *
 *************************************************************************
 */

_TEXT_BASE: .word	TEXT_BASE

.globl _armboot_start
_armboot_start:	.word _start

/*
 * These are defined in the board-specific linker script.
 */
.globl _bss_start
_bss_start:	.word __bss_start

.globl _bss_end
_bss_end: .word _end

#ifdef CONFIG_USE_IRQ
/* IRQ stack memory (calculated at run-time) */
.globl IRQ_STACK_START
IRQ_STACK_START: .word	0x0badc0de

/* IRQ stack memory (calculated at run-time) */
.globl FIQ_STACK_START
FIQ_STACK_START: .word 0x0badc0de
#endif

/* ---------------------
 * the actual reset code
 */

reset:
					/* -> code in steppingstone SRAM
					* set the cpu to SVC32 mode
					* ---------------------------------------- */
					mrs	r0, cpsr
					bic	r0, r0, #0x1f
					orr	r0, r0, #0xd3
					msr	cpsr, r0

					ldr r0, .xS3C24X0_GPADAT
					/* original from acer NAND */
					@mov r1, #0xfe000000
					/* enable NAND writings */
					@"GPADAT |= (1 << 11)"
					ldr r1, .xS3C24X0_GPADAT_val_0xfe000800
					STR r1, [r0]

					ldr r0, =S3C24X0_GPACON
					/* original from acer NAND */
					@ldr r1, =0x005EAF1F
					/* enable pin output for NAND writings */
					ldr r1, .xS3C24X0_GPACON_0x005EA71F
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPBUP
					ldr r1, .xS3C24X0_GPBUP_0x00001FFF
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPBDAT
					ldr r1, .xS3C24X0_GPBDAT_0x00000146
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPBCON
					ldr r1, .xS3C24X0_GPBCON_0x00155455
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPCUP
					ldr r1, .xS3C24X0_GPCUP_0x0000FFFF
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPCDAT
					ldr r1, .xS3C24X0_GPCDAT_0x12
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPCCON
					ldr r1, .xS3C24X0_GPCCON_0x55551515
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPDUP
					ldr r1, .xS3C24X0_GPDUP_0x0000EFFF
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPDCON
					ldr r1, .xS3C24X0_GPDCON_0x00001000
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPDDAT
					ldr r1, .xS3C24X0_GPDDAT_0x05514514
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPEUP
					ldr r1, .xS3C24X0_GPEUP_0x0000FFFF
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPEDAT
					MOV r1, #0
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPECON
					ldr r1, .xS3C24X0_GPECON_0x05555555
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPFUP
					ldr r1, .xS3C24X0_GPFUP_0xff
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPFDAT
					MOV r1, #0x00
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPFCON		@   0x56000050
					MOV r1, #0x02
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPGUP
					ldr r1, .xS3C24X0_GPGUP_0x0000FFFF
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPGDAT
					MOV r1, #0x00
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPGCON
					ldr r1, .xS3C24X0_GPGCON_0x01150010
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPHUP
					ldr r1, .xS3C24X0_GPHUP_0x000007FF
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPHDAT
					ldr r1, .xS3C24X0_GPHDAT_0x200
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPHCON
					@ldr r1, =0x00155514					/* N300 NAND original value  */
					@ldr r1, =0x0000a0aa					/* N310 linux runtime val  */
					ldr r1, .xS3C24X0_GPHCON_0x0016faaa		/* SMDK2440 and eboot.nb0 UARTinit val  */
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPJUP
					ldr r1, .xS3C24X0_GPJUP_0x00001FFF
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPJDAT
					ldr r1, .xS3C24X0_GPJDAT_0x00001FFF
					STR r1, [r0]

					ldr r0, .xS3C24X0_GPJCON
					ldr r1, .xS3C24X0_GPJCON_0x55555555
					STR r1, [r0]

					/* turn off the watchdog */
					ldr     r0, =S3C24X0_WATCHDOG_BASE
					mov     r1, #0x0
					str     r1, [r0]
					ldr     r0, .xS3C24X0_INTERRUPT_MASK
					mov     r1, #0xffffffff
					str     r1, [r0]
					ldr     r0, .xS3C24X0_INTERRUPT_SUBMASK
					mov     r1, #0xffffffff
					str     r1, [r0]

					ldr r0, .xS3C24X0_CLKDIVN
					mov r1, #0x7
					str     r1, [r0]

					MRC p15, 0x00, r0, c1, c0, 0x00
					ORR r0, r0, #0xc0000000				@ set asynchronous clocking mode
					MCR p15, 0x00, r0, c1, c0, 0x00

@ ---------------------------------------- T E S T  C O D E --------------
#define USE_TEST_CODE
#ifdef USE_TEST_CODE
test_code_start:	mov	r1, #S3C24X0_GPIO_BASE
					add	r1, r1, #0x50
					mov	r2, #0x100						@ set GPF4 as output (Home button)
					str	r2, [r1]						@ r1==S3C24X0_GPFCON
					mov	r2, #0xff
					str	r2, [r1, #8]
					mov	r2, #0	
					str	r2, [r1, #4]					@ set GPF4 to zero

					mov	r1, #S3C24X0_GPIO_BASE
					add	r1, r1, #0x50
					mov	r2, #0x400          		@ set GPF5 as output (Calendar button)
					str	r2, [r1]      				@ r1==S3C24X0_GPFCON
					mov	r2, #0xff
					str	r2, [r1, #8]
					mov	r2, #0
					str	r2, [r1, #4]  				@ set GPF5 to zero

					mov	r1, #S3C24X0_GPIO_BASE
					add	r1, r1, #0x50              	@ r1==S3C24X0_GPFCON
					mov	r2, #0x1000                 @ set GPF6 as output (Contacts button)
					str	r2, [r1]       				@
					mov	r2, #0xff
					str	r2, [r1, #8]
					mov	r2, #0	
					str	r2, [r1, #4]                @ @ set GPF6 to zero
#endif

@ ---------------------------------------- T E S T  C O D E --------------
@#include "superipl.S"
#ifndef CONFIG_SKIP_LOWLEVEL_INIT

					MOV r0, #S3C24X0_CLOCK_POWER_BASE
					MVN r1, #0xff000000
					str     r1, [r0]

					ldr     r0, .xS3C24X0_UPLLCON
					ldr     r1, .xS3C24X0_UPLLCON_0x0003C042
					str     r1, [r0]
					nop
					nop
					nop
					nop
					nop
					nop
					nop
					ldr     r0, .xS3C24X0_CAMDIVN
					mov     r1, #0x0

					ldr     r0,.xS3C24X0_MPLLCON
					@ldr     r1, =0x00074051
					ldr     r1, .xS3C24X0_MPLLCON_0x0006e031
					str     r1, [r0]
					MOV r0, #0x200
delay1:				SUBS r0, r0, #0x1
					bne delay1
chk_powersupply:	ldr     r0, .xS3C24X0_GPCDAT
					ldr	r1, [r0]
					tst	r1, #0x80		@ check GPC7 - AC supply present
					beq	CPU_init_critical
					b	no_ACsupply
no_ACsupply:		@ 

/*
 *************************************************************************
 *
 * CPU_init_critical registers
 *
 * setup important registers
 * setup memory timing
 *
 *************************************************************************
 */
	/* flush v4 I/D caches */
CPU_init_critical:	mov	r0, #0
					mcr	p15, 0, r0, c7, c7, 0	/* flush v3/v4 cache */
					mcr	p15, 0, r0, c8, c7, 0	/* flush v4 TLB */

					/*
					* disable MMU stuff and caches
					*/
					mrc	p15, 0, r0, c1, c0, 0
					bic	r0, r0, #0x00002300	@ clear bits 13, 9:8 (--V- --RS)
					bic	r0, r0, #0x00000087	@ clear bits 7, 2:0 (B--- -CAM)
					orr	r0, r0, #0x00000002	@ set bit 2 (A) Align
					orr	r0, r0, #0x00001000	@ set bit 12 (I) I-Cache
					mcr	p15, 0, r0, c1, c0, 0

					/* --------------------------------------------------
					* before relocating, we have to setup RAM timing
					* because memory timing is board-dependend, you will
					* find a lowlevel_init.S in your board directory.
					*/
					mov	ip, lr

					/* -------------------------------------------------- */
					bl	lowlevel_init

#endif


#ifndef CONFIG_SKIP_RELOCATE_UBOOT
#define oNFCONF                 0x00
#define oNFCONT                 0x04
#define oNFCMD                  0x08
#define oNFADDR                 0x0c
#define oNFDATA                 0x10
#define oNFSTAT                 0x20
#define oNFECC                  0x2c

 
@#define NEW_COPY
#ifdef  NEW_COPY
@#ifdef  CONFIG_NAND_BOOT
#define  CFG_NAND_REG_BASE     		0x4E000000    //s3c2440 nandflash
#define  CFG_MONITOR_SIZE     		0x00020000   //
#define  CFG_MONITOR_RAM_BASE     	0x33F80000  //
#define  CFG_MONITOR_NAND_BASE     	0x00000000
CopyToSdram:

    ldr r0, =CFG_NAND_REG_BASE

    ldr r1, =((1<<12)|(4<<8)|(1<<4)|(0<<0))           //TACLS=1,TWRPH0=4, TWRPH1=1
	@ldr   r1,=((7<<12)|(7<<8)|(7<<4)|(0<<0))
    str r1, [r0, #oNFCONF]

    @ldr r1, =((1<<6)|(1<<5)|(1<<4)|(0<<1)|(1<<0))         //ECC
	ldr r1, =((1<<4)|(0<<1)|(1<<0)) 					/*Active low CE Control*/
    str r1, [r0, #oNFCONT]
    
    mov r1, #0x6          //RnB
    strb r1, [r0, #oNFSTAT]

    mov r1, #0xff            //reset command
    strb r1, [r0, #oNFCMD]

rst_wait:     
    ldr r1, [r0, #oNFSTAT]   
    tst r1, #0x1
    beq rst_wait

    ldr r2, =CFG_MONITOR_RAM_BASE		@ destination address
    ldr r3, =CFG_MONITOR_NAND_BASE		@ source address

copy_monitor:
    mov r1, #0x00
    strb r1, [r0, #oNFCMD]

    and r4, r3, #0xff           
    strb r4, [r0, #oNFADDR]     

    mov r4, r3, lsr #8
    and r4, r4, #0x0f          
    strb r4, [r0, #oNFADDR] 

    mov r4, r3, lsr #12
    and r4, r4, #0xff           
    strb r4, [r0, #oNFADDR] 

    mov r4, r3, lsr #20
    and r4, r4, #0xff           
    strb r4, [r0, #oNFADDR] 

    mov r4, r3, lsr #28
    and r4, r4, #0x01          
    strb r4, [r0, #oNFADDR] 

    mov r1, #0x30              
    strb r1, [r0, #oNFCMD] 

    mov r1, #0x70              
    strb r1, [r0, #oNFCMD]
wait_ready:
    ldrb r1, [r0, #oNFDATA]   
    and r1, r1, #0x40
    teq r1, #0x40
    bne wait_ready
    
    mov r5, #0  
copy_page:                  
    ldr r1, [r0, #oNFDATA]
    str r1, [r2], #4
    add r5, r5, #4
    cmp r5, #2048
    blt copy_page

	/*64 - 128K*/
    add r3, r3, #0x1000     
    ldr r5, =CFG_MONITOR_SIZE 
    cmp r3, r5, lsl #1
    blt copy_monitor
   
    ldr r1, [r0, #oNFCONT]     
    orr r1, r1, #0x02
    str r1, [r0, #oNFCONT]

	/*steppingston 1k nandflash CFG_MONITOR_RAM_BASE*/
    mov r0, #0    
    ldr r1, =CFG_MONITOR_RAM_BASE
    mov r2, #0x400 

copy_complete:
    ldr r3, [r0], #4 
    ldr r4, [r1], #4
    teq r3, r4
    bne err
    subs r2, r2, #4
    beq stack_setup
    bne copy_complete

err:
    loop: b loop     

#endif

//#define NEW_COPY2
#ifdef NEW_COPY2
#define NAND_SECTOR_SIZE        512
#define NAND_BLOCK_MASK         (NAND_SECTOR_SIZE - 1)
CopyToSdram:
	@set NAND controls
	mov	r1, #S3C2440_NAND_BASE
	@ldr	r2, =0xf030			@nand flash control enable
	ldr   r2,=((7<<12)|(7<<8)|(7<<4)|(0<<0))
	str	r2, [r1, #oNFCONF]
	@reset 
	mov	r2, #0xff
	strb	r2, [r1, #oNFCMD]
2:	
	ldr	r2, [r1, #oNFSTAT]		@start inquiry
	tst	r2, #0x1
	beq	2b
	@}}reset end

	@{{read
	@ldr	r5, =_TEXT_BASE-0x40		@ destination address
	ldr	r5, =TEXT_BASE					@ destination address
	ldr	r3, =0x0					@page account
	ldr	r4, =0x80
	@ldr	r4, =0x00
	ldr	r6, =0x1
	@ldr	r6, =0x00
3:	
	mov 	r2, #0
	strb	r2, [r1, #oNFCMD]
	strb 	r2, [r1, #oNFADDR]		@row address (in field offset address)	(highest byte ?)
	strb	r3, [r1, #oNFADDR]		@page address & block address			(high byte ?)
	strb 	r4, [r1, #oNFADDR]		@block address 0						(low byte ?)
	strb 	r6, [r1, #oNFADDR]		@block address 0						(lowest byte ?)
4:	
	ldr	r2, [r1, #oNFSTAT]		@start inquiry
	tst	r2, #0x1
	beq	4b
	mov	r7, #NAND_SECTOR_SIZE			@a page bytes 
5:	
	ldr	r2, [r1, #oNFDATA]
	strb	r2, [r5],#1
	subs	r7, r7,	#1
	bne	5b
	add	r3, r3,	#1
	cmp	r3, #0x10				@copy 16 pages 8K
	blt	3b
@	mov	r3, #0x0
@	add	r4, r4, #1
@	cmp	r4, #ff
@	blt	3b
@	mov	r4, #0x0
@	add	r6, r6, #1
	

	@}}read end
	@NAND chip disable
	ldr	r2, [r1, #oNFCONF]
	orr	r2, r2, #0x800			@off
	str	r2, [r1, #oNFCONF]
#endif

//#define ADAPTED_COPY
#ifdef ADAPTED_COPY

DW_STACK_START:
        .word      STACK_BASE+STACK_SIZE-4
CopyToSdram:
        mov r10, lr		@save current instruction pointer
		@ reset NAND
        mov   r1, #S3C2440_NAND_BASE
        ldr   r2,=((7<<12)|(7<<8)|(7<<4)|(0<<0))		@ 11
        str   r2, [r1, #oNFCONF]
        ldr   r2, [r1, #oNFCONF]

        ldr     r2, =((1<<4)|(0<<1)|(1<<0)) /*Active low CE Control*/
        str     r2,[r1,#oNFCONT]
        ldr     r2,[r1,#oNFCONT]

        ldr     r2, =(0x6)                  /* RnB Clear*/
        str     r2, [r1, #oNFSTAT]
        ldr     r2, [r1, #oNFSTAT]

        mov     r2, #0xff               @ RESET command
        strb    r2, [r1, #oNFCMD]
        mov     r3, #0                  @ wait
1:      add     r3, r3, #0x1
        cmp     r3, #0xa
        blt     1b

2:      ldr     r2, [r1, #oNFSTAT]      @ wait ready
        tst     r2, #0x4
        beq     2b

        ldr     r2, [r1, #oNFCMD]
        orr     r2, r2, #0x2            @ Flash Memory Chip Disable
        str     r2, [r1, #oNFCMD]

#if 0
//#ifdef _NOTUSEFUL
        @ prepare to call C functions (for nand_read())
        @ldr   sp, =(STACK_BASE+STACK_SIZE-4)    @ setup stack pointer
        ldr   sp, DW_STACK_START    @ setup stack pointer
        mov fp, #0                  @ no previous frame, so fp=0
#endif
        @ copy u-boot to RAM @ _TEXT_BASE
        @ldr   r0, =_TEXT_BASE-0x40
        @ldr   r0, =_TEXT_BASE
        ldr   r0, =stack_setup			@ destination address

        mov   r1, #0x0					@ NAND source address
        ldr   r2, =CFG_UBOOT_SIZE 		@size
        @mov   r2, #CFG_UBOOT_SIZE  @size
        bl    nand_read_ll

#endif

#define SMDK2440_COPY
#ifdef SMDK2440_COPY

DW_STACK_START:
        .word      STACK_BASE+STACK_SIZE-4
CopyToSdram:
        mov r10, lr
@ reset NAND
        mov   r1, #NAND_CTL_BASE
        ldr   r2,=((7<<12)|(7<<8)|(7<<4)|(0<<0))
        str   r2, [r1, #oNFCONF]
        ldr   r2, [r1, #oNFCONF]

        ldr     r2, =((1<<4)|(0<<1)|(1<<0)) /*Active low CE Control*/
        str     r2,[r1,#oNFCONT]
        ldr     r2,[r1,#oNFCONT]

        ldr     r2, =(0x6)                  /* RnB Clear*/
        str     r2, [r1, #oNFSTAT]
        ldr     r2, [r1, #oNFSTAT]

        mov     r2, #0xff               @ RESET command
        strb    r2, [r1, #oNFCMD]
        mov     r3, #0                  @ wait
1:      add     r3, r3, #0x1
        cmp     r3, #0xa
        blt     1b
2:      ldr     r2, [r1, #oNFSTAT]      @ wait ready
        tst     r2, #0x4
        beq     2b

        ldr     r2, [r1, #oNFCMD]
        orr     r2, r2, #0x2            @ Flash Memory Chip Disable
        str     r2, [r1, #oNFCMD]

        @ get read to call C functions (for nand_read())
        ldr   sp, DW_STACK_START    @ setup stack pointer
        mov fp, #0                  @ no previous frame, so fp=0

        @ copy u-boot to RAM
        ldr   r0, =UBOOT_RAM_BASE
        mov   r1, #0x0  @address
        mov   r2, #0x30000  @size
        bl    nand_read_ll

        tst   r0, #0x0
        beq   ok_nand_read

#ifdef CONFIG_DEBUG_LL
bad_nand_read:
        ldr   r0, STR_FAIL
		mov	r1, #S3C24X0_UART_BASE
        bl    PrintWord
1:      b     1b          @ infinite loop
#endif

ok_nand_read:
#ifdef CONFIG_DEBUG_LL
        ldr   r0, STR_OK
		mov	r1, #S3C24X0_UART_BASE
        bl    PrintWord
#endif

@ verify
        mov r0, #0
        ldr   r1, =UBOOT_RAM_BASE
        mov r2, #0x400     @ 4 bytes * 1024 = 4K-bytes
go_next:
        ldr   r3, [r0], #4
        ldr   r4, [r1], #4
        teq   r3, r4
        bne  notmatch
        subs r2, r2, #4
        beq  done_nand_read
        bne  go_next

notmatch:
#ifdef CONFIG_DEBUG_LL
	sub  r0, r0, #4
	mov	r1, #S3C24X0_UART_BASE
	bl    PrintHexWord
	ldr   r0, STR_FAIL
	mov	r1, #S3C24X0_UART_BASE
	bl    PrintWord
#endif
1:      b     1b

done_nand_read:
#ifdef CONFIG_DEBUG_LL
	ldr   r0, STR_OK
	mov	r1, #S3C24X0_UART_BASE
	bl    PrintWord
#endif

	b stack_setup

@ clear memory
@ r0: start address
@ r1: length
mem_clear:
        mov r2, #0
        mov r3, r2
        mov r4, r2
        mov r5, r2
        mov r6, r2
        mov r7, r2
        mov r8, r2
        mov r9, r2
clear_loop:
        stmia      r0!, {r2-r9}
        subs r1, r1, #(8 * 4)
        bne  clear_loop
        mov pc, lr

        .align     2

#endif

#endif

/*
	Source address here when copied from NAND
*/
stack_setup:
	ldr	r0, _TEXT_BASE					/* upper 128 KiB: relocated uboot   */
	sub	r0, r0, #CFG_MALLOC_LEN			/* malloc area                      */
	sub	r0, r0, #CFG_GBL_DATA_SIZE 		/* bdinfo                       	*/
#ifdef CONFIG_USE_IRQ
	sub	r0, r0, #(CONFIG_STACKSIZE_IRQ+CONFIG_STACKSIZE_FIQ)
#endif
	sub	sp, r0, #12		/* leave 3 words for abort-stack    */

clear_bss:
	ldr	r0, _bss_start		/* find start of bss segment        */
	ldr	r1, _bss_end		/* stop here                        */
	mov 	r2, #0x00000000		/* clear                            */
clbss_l:
	str	r2, [r0]		/* clear loop...                    */
	add	r0, r0, #4
	cmp	r0, r1
	ble	clbss_l

#ifdef CONFIG_GOFORCE4000_INIT
#define			VIDEO_BASE		0x20000000

try_gof_1:			bl	goforce_init1 
gfi3:				bl	samsung_lcd_init
					b gof_init_end

goforce_init1:   push	{r4, r5, r6, r7, r8, r9, sl, lr}
				 mov	r2, #VIDEO_BASE
				 mov	r3, #0x10
				 mov	r0, #0x32
				 str	r3, [r2]
				 bl	highdelay
				 mov	r3, #VIDEO_BASE
				 orr	r3, r3, #4
				 mov	sl, #0x20
				 mov	r0, #0x32
				 str	sl, [r3]
				 bl	highdelay
				 mov	r4, #VIDEO_BASE
				 orr	r4, r4, #0x1c
				 mov	r9, #0
				 mov	r0, #0x14
				 str	r9, [r4]
				 bl	highdelay
				 mov	r3, #VIDEO_BASE
				 mov	r5, #VIDEO_BASE
				 orr	r3, r3, #0x28
				 mov	r2, #VIDEO_BASE
				 orr	r5, r5, #0x2c
				 str	r9, [r3]
				 ldr	r3, .x6f3c
				 orr	r2, r2, #0x38
				 mov	r1, #VIDEO_BASE
				 str	r9, [r5]
				 mov	r6, #VIDEO_BASE
				 str	r9, [r2]
				 orr	r1, r1, #0x40
				 mov	r7, #VIDEO_BASE
				 mov	r2, #VIDEO_BASE
				 orr	r6, r6, #0x48
				 str	r9, [r1]
				 orr	r7, r7, #0x50
				 orr	r2, r2, #0x5c
				 str	r3, [r6]
				 mov	r3, #VIDEO_BASE
				 str	r9, [r7]
				 str	r9, [r2]
				 orr	r3, r3, #0x60
				 mov	r2, #0x1f
				 mov	r0, #0x32
				 str	r2, [r3]
				 bl	highdelay
				 mov	r3, #VIDEO_BASE
				 orr	r3, r3, #0xc
				 mov	r2, #0x2b
				 mov	r0, #4
				 str	r2, [r3]
				 bl	highdelay
				 mov	r2, #VIDEO_BASE
				 mov	r3, #0x2400
				 orr	r2, r2, #8
				 orr	r3, r3, #0x3f
				 mov	r0, #5
				 str	r3, [r2]
				 bl	highdelay
				 mov	r2, #VIDEO_BASE
				 mov	r3, #0xec0
				 orr	r2, r2, #0x10
				 orr	r3, r3, #9
				 mov	r0, #5
				 str	r3, [r2]
				 bl	highdelay
				 mov	r1, #VIDEO_BASE
				 mov	r3, #0x2100
				 mov	r0, #VIDEO_BASE
				 orr	r1, r1, #0x100
				 orr	r3, r3, #5
				 mov	lr, #VIDEO_BASE
				 mov	r2, #0x4400
				 orr	r0, r0, #0x104
				 mov	r8, #1
				 str	r3, [r1]
				 orr	lr, lr, #0x14
				 orr	r2, r2, #2
				 str	r8, [r0]
				 str	r2, [lr]
				 mov	r0, #5
				 bl	highdelay
				 mov	r3, #VIDEO_BASE
				 orr	r3, r3, #0x18
				 mov	r0, #5	
				 str	r9, [r3]
				 bl	highdelay
				 mov	r3, #0x320
				 str	r3, [r4]
				 mov	r4, #VIDEO_BASE
				 orr	r4, r4, #0x20
				 mov	r2, #VIDEO_BASE
				 mov	r3, #0x110
				 str	r9, [r4]
				 orr	r2, r2, #0x30
				 orr	r3, r3, #1
				 str	r8, [r5]
				 mov	r0, #5
				 str	r3, [r2]
				 bl	highdelay
				 mov	r3, #VIDEO_BASE
				 orr	r3, r3, #0x34
				 mov	r0, #5
				 str	r9, [r3]
				 bl	highdelay
				 mov	r0, #5
				 str	r9, [r6]
				 bl	highdelay
				 mov	r0, #5
				 str	r9, [r7]
				 bl	highdelay
				 mov	r3, #VIDEO_BASE
				 orr	r3, r3, #0x64
				 mov	r2, #4
				 mov	r0, #5
				 str	r2, [r3]
				 bl	highdelay
				 ldr	r3, .x6f38
				 mov	r1, #VIDEO_BASE
				 mov	r2, #VIDEO_BASE
				 ldr	r7, .x6f34
				 orr	r1, r1, #0x108
				 orr	r2, r2, #0x10c
				 mov	r0, #0x24
				 str	r3, [r1]
				 ldr	r1, .gof_a4c_add
				 mov	r6, #VIDEO_BASE
				 str	r0, [r2]
				 str	r8, [r4]
				 ldr	r0, .x6f2c
				 orr	r6, r6, #0xa40
				 str	r9, [r7]
				 mov	r4, #0x3c0
				 ldr	r2, .gof_a34_add
				 ldr	r3, .x6f24
				 str	r9, [r6]
				 mov	lr, #VIDEO_BASE
				 str	r4, [r1]
				 ldr	r4, .x6f20
				 mov	r1, #0x1e80000
				 orr	lr, lr, #0xa30
				 orr	r1, r1, #8
				 str	r0, [lr]
				 ldr	r0, .x6f1c
				 ldr	lr, .gof_a14_add
				 mov	r5, #VIDEO_BASE
				 str	r3, [r2]
				 ldr	r3, .x6f14
				 str	r1, [r4]
				 ldr	r1, .x6f10
				 mov	r2, #0x40000
				 orr	r5, r5, #0xa10
				 orr	r2, r2, #0x1f0
				 str	r0, [r5]
				 mov	r0, #0x4000
				 str	r2, [lr]
				 ldr	r4, .x6f0c
				 ldr	lr, .x6f08
				 str	r3, [r1]
				 ldr	r1, .x6f04
				 orr	r0, r0, #0x44
				 mov	r8, #VIDEO_BASE
				 orr	r8, r8, #0xa00
				 ldr	r2, .x6f00
				 str	r0, [r8]
				 mov	r0, #3
				 mov	r3, #0x58000
				 str	r0, [r4]
				 orr	r3, r3, #4
				 str	r1, [lr]
				 str	r3, [r2]
				 mov	r3, #VIDEO_BASE
				 orr	r3, r3, #0xaa0
				 str	r9, [r6]
				 mov	r0, #0x200
				 mov	r2, #VIDEO_BASE
				 str	r9, [r7]
				 str	r0, [r3]
				 ldr	r1, .x6efc
				 mov	r0, #0xa0000
				 orr	r2, r2, #0xb00
				 str	r0, [r2]
				 ldr	r3, .x6ef8
				 mov	r0, #0x730000
				 str	r0, [r1]
				 mov	r1, #0x3f
				 mov	r2, #VIDEO_BASE
				 str	r1, [r3]
				 ldr	lr, .x6ef4
				 ldr	r5, .x6ef0
				 mov	r3, #0x3000000
				 orr	r2, r2, #0xb10
				 ldr	r0, .x6eec
				 ldr	r1, .x6ee8
				 str	r3, [r2]
				 ldr	r2, .x6ee4
				 ldr	r3, .x6ee0
				 str	r5, [lr]
				 str	r1, [r0]
				 ldr	r1, .x6edc
				 str	r3, [r2]
				 ldr	r3, .x6ed8
				 mov	r2, #VIDEO_BASE
				 orr	r2, r2, #0xb20
				 mov	r6, #0x40000
				 ldr	lr, .x6ed4
				 str	r3, [r1]
				 mov	r4, #VIDEO_BASE
				 mov	r0, #0x100
				 str	r6, [r2]
				 ldr	r2, .x6ed0
				 orr	r4, r4, #0xb30
				 orr	r0, r0, #1
				 mov	r3, #0xff00
				 mov	r1, #VIDEO_BASE
				 orr	r3, r3, #0xf3
				 str	r0, [r4]
				 ldr	r0, .x6ecc
				 orr	r1, r1, #0xb40
				 str	r9, [lr]
				 ldr	lr, .x6ec8
				 str	r3, [r2]
				 ldr	r3, .x6ec4
				 mov	r2, #0xbb0
				 str	r9, [r1]
				 ldr	r1, .x6ec0
				 orr	r2, r2, #0xa
				 str	r9, [r0]
				 ldr	r0, .x6ebc
				 str	r2, [lr]
				 ldr	lr, .x6eb8
				 str	r3, [r1]
				 mov	r3, #0x2000
				 ldr	r2, .x6eb4
				 mov	r1, #VIDEO_BASE
				 str	r3, [r0]
				 ldr	r3, .x6eb0
				 orr	r1, r1, #0xba0
				 str	r5, [lr]
				 str	r9, [r1]
				 str	r9, [r2]
				 str	sl, [r3]
				 mov	r0, #0x14
				 bl	highdelay
				 ldr	r3, [r8]
				 mov	r0, #0x28
				 orr	r3, r3, #3
				 str	r3, [r8]
				 bl	highdelay
			
goforce_init2:	
				  mov	r3, #VIDEO_BASE          @original address 0x7400
				  ldr	r2, .x745c
				  orr	r3, r3, #0x470
				  mov	r0, #0x4000
				  str	r0, [r3]
				  mov	r3, #0x10000
				  mov	r1, #VIDEO_BASE
				  str	r3, [r2]
				  mov	r3, #0x25
				  orr	r1, r1, #0x28
				  mov	r0, #VIDEO_BASE
				  str	r3, [r1]

@cxlabs:		b test2

				  mov	r1, #0
				  mov	r2, #0x96000
				  orr	r0, r0, #0x20000
				  bl	bcf44
test2:			  mov	r0, #VIDEO_BASE
				  orr	r0, r0, #0x20000
				  mov	r2, #0x96000
				  mov	r1, #0
				  bl	bcf44
				  pop	{r4, r5, r6, r7, r8, r9, sl, lr}
				  mov	pc, lr
	  
.x745c:			.word VIDEO_BASE+0x474 	
.x6eb0:			.word VIDEO_BASE+0xb5c
.x6eb4:			.word VIDEO_BASE+0xbac 	
.x6eb8:			.word VIDEO_BASE+0xb58 	
.x6ebc:			.word VIDEO_BASE+0xb54 	
.x6ec0:			.word VIDEO_BASE+0xb48
 	
.x6ec4:			.word 0x04001541 
	
.x6ec8:			.word VIDEO_BASE+0xb4c 	
.x6ecc:			.word VIDEO_BASE+0xb44 	
.x6ed0:			.word VIDEO_BASE+0xb3c 	
.x6ed4:			.word VIDEO_BASE+0xb34 

.x6ed8:			.word 0x537d2fca 	

.x6edc:			.word VIDEO_BASE+0xb2c 	
.x6ee0:			.word 0x50512a00 	

.x6ee4:			.word VIDEO_BASE+0xb1c 	
.x6ee8:			.word 0x28051005 	

.x6eec:			.word VIDEO_BASE+0xb18 	
.x6ef0:			.word 0x55555555 	

.x6ef4:			.word VIDEO_BASE+0xb14 	
.x6ef8:			.word VIDEO_BASE+0xb08 	
.x6efc:			.word VIDEO_BASE+0xb04 	
.x6f00:			.word VIDEO_BASE+0xa28 	
.x6f04:			.word 0x02be02bc
	
.x6f08:			.word VIDEO_BASE+0xa1c 	
.x6f0c:			.word VIDEO_BASE+0xa04 	
.x6f10:			.word VIDEO_BASE+0xa18 	
.x6f14:			.word 0x00010287

.gof_a14_add:	.word VIDEO_BASE+0xa14 	
.x6f1c:			.word 0x02830004

.x6f20:			.word VIDEO_BASE+0xa0c 	
.x6f24:			.word 0x027f0004
 	
.gof_a34_add:	.word VIDEO_BASE+0xa34 	
.x6f2c:			.word 0x01df0008

.gof_a4c_add:	.word VIDEO_BASE+0xa4c 	
.x6f34:			.word VIDEO_BASE+0xa48 	
.x6f38:			.word 0xaa432793
.x6f3c:			.word 0x09244920


/* -------------------------------------------------------------------------
	DELAY : in r0  -> amount of delay
---------------------------------------------------------------------------- */
highdelay:				push	{r1, r2}
b79dc:	 				mov	r1, #33		@ 0x21
@b79dc:	 				mov	r1, #133
b79e0:	 				mov	r2, #100	@ 0x64
b79e4:	 				subs	r2, r2, #1
						bne	b79e4
						subs	r1, r1, #1
						bne	b79e0
						subs	r0, r0, #1
						bne	b79dc
						pop	{r1, r2}
						mov	pc, lr

lowdelay:				push	{r1, r2}
b7a08:	 				mov	r2, #3
b7a0c:					subs	r2, r2, #1
						bne	b7a0c
						subs	r0, r0, #1
						bne	b7a08
						pop	{r1, r2}
						mov	pc, lr

/* Calling arguments ---------------------
						mov	r1, #0	@ 0x0
						orr	r0, r0, #0x20000
						mov	r2, #0x96000
----------------------------------------*/
bcf44:					subs	r2, r2, #4
						mov	r3, r0
						blt	bcf94
						and	r1, r1, #0xff
						orr	r1, r1, r1, lsl #8
						ands	ip, r3, #3
						bne	bcfb0
bcf60:					orr	r1, r1, r1, lsl #16
						subs	r2, r2, #12
						mov	ip, r1
						blt	bcf80
bcf70:			 		stmia	r3!, {r1, ip}
						subs	r2, r2, #16
						stmia	r3!, {r1, ip}
						bge	bcf70
bcf80: 					adds	r2, r2, #8
						stmiage	r3!, {r1, ip}	@ WARNING !!!!
						subge	r2, r2, #8
						adds	r2, r2, #4
						strge	r1, [r3], #4
bcf94:					addslt	r2, r2, #4		@ WARNING !!!!
						beq	bcfac
						strb	r1, [r3], #1
						cmp	r2, #2
						strbge	r1, [r3], #1	@ WARNING !!!!
						strbgt	r1, [r3], #1	@ WARNING !!!!
bcfac: 					mov	pc, lr

bcfb0:					tst	r3, #1
						subne	r2, r2, #1
						strbne	r1, [r3], #1
						tst	r3, #2
						subne	r2, r2, #2
						strhne	r1, [r3], #2
						b	bcf60


samsung_lcd_init:		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
						mov	r2, #VIDEO_BASE
						mov	r3, #0x10
						mov	r0, #0x32
						str	r3, [r2]
						bl	highdelay
						mov	r3, #VIDEO_BASE
						orr	r3, r3, #4
						mov	fp, #0x20
						mov	r0, #0x32
						str	fp, [r3]
						bl	highdelay
						mov	r4, #VIDEO_BASE
						orr	r4, r4, #0x1c
						mov	sl, #0
						mov	r0, #0x14
						str	sl, [r4]
						bl	highdelay
						mov	r3, #VIDEO_BASE
						mov	r5, #VIDEO_BASE
						orr	r3, r3, #0x28
						mov	r2, #VIDEO_BASE
						orr	r5, r5, #0x2c
						str	sl, [r3]
						ldr	r3, .x6ac0
						orr	r2, r2, #0x38
						mov	r1, #VIDEO_BASE
						str	sl, [r5]
						mov	r6, #VIDEO_BASE
						str	sl, [r2]
						orr	r1, r1, #64	@ 0x40
						mov	r7, #VIDEO_BASE
						mov	r2, #VIDEO_BASE
						orr	r6, r6, #0x48
						str	sl, [r1]
						orr	r7, r7, #0x50
						orr	r2, r2, #92	@ 0x5c
						str	r3, [r6]
						mov	r3, #VIDEO_BASE
						str	sl, [r7]
						str	sl, [r2]
						orr	r3, r3, #96	@ 0x60
						mov	r2, #31	@ 0x1f
						mov	r0, #50	@ 0x32
						str	r2, [r3]
						bl	highdelay
						mov	r3, #VIDEO_BASE
						orr	r3, r3, #12	@ 0xc
						mov	r2, #43	@ 0x2b
						mov	r0, #4	@ 0x4
						str	r2, [r3]
						bl	highdelay
						mov	r2, #VIDEO_BASE
						mov	r3, #0x2400
						orr	r2, r2, #8	@ 0x8
						orr	r3, r3, #63	@ 0x3f
						mov	r0, #5	@ 0x5
						str	r3, [r2]
						bl	highdelay
						mov	r2, #VIDEO_BASE
						mov	r3, #0xec0
						orr	r2, r2, #0x10
						orr	r3, r3, #9
						mov	r0, #5
						str	r3, [r2]
						bl	highdelay
						mov	r1, #VIDEO_BASE
						mov	r3, #0x2100
						mov	r0, #VIDEO_BASE
						orr	r1, r1, #0x100
						orr	r3, r3, #5
						mov	lr, #VIDEO_BASE
						mov	r2, #0x4400
						orr	r0, r0, #0x104
						mov	r8, #1
						str	r3, [r1]
						orr	lr, lr, #0x14
						orr	r2, r2, #2
						str	r8, [r0]
						str	r2, [lr]
						mov	r0, #5
						bl	highdelay
						mov	r3, #VIDEO_BASE
						orr	r3, r3, #0x18
						mov	r0, #5
						str	sl, [r3]
						bl	highdelay
						mov	r3, #0x320
						str	r3, [r4]
						mov	r4, #VIDEO_BASE
						orr	r4, r4, #0x20
						mov	r2, #VIDEO_BASE
						mov	r3, #0x110
						str	sl, [r4]
						orr	r2, r2, #0x30
						orr	r3, r3, #1
						str	r8, [r5]
						mov	r0, #5
						str	r3, [r2]
						bl	highdelay
						mov	r3, #VIDEO_BASE
						orr	r3, r3, #0x34
						mov	r0, #5
						str	sl, [r3]
						bl	highdelay
						mov	r0, #5
						str	sl, [r6]
						bl	highdelay
						mov	r0, #5
						str	sl, [r7]
						bl	highdelay
						mov	r3, #VIDEO_BASE
						orr	r3, r3, #0x64
						mov	r2, #4
						mov	r0, #5
						str	r2, [r3]
						bl	highdelay
						ldr	r3, .x6abc
						mov	r2, #VIDEO_BASE
						orr	r2, r2, #0x108
						mov	r1, #VIDEO_BASE
						str	r3, [r2]
						mov	r3, #36	@ 0x24
						orr	r1, r1, #0x10c
						mov	r0, #VIDEO_BASE
						str	r3, [r1]

@						b jump_over


						mov	r1, #0	@ 0x0
						orr	r0, r0, #0x20000
						mov	r2, #0x96000
						bl	bcf44
						str	r8, [r4]

jump_over:
						ldr	r8, .x6ab8
						ldr	r3, .x6ab4
						ldr	r0, .x6ab0
						mov	r7, #VIDEO_BASE
						mov	r4, #VIDEO_BASE
						orr	r7, r7, #0xa40
						str	sl, [r8]
						mov	r1, #0x3c0
						ldr	lr, .x6aac
						ldr	r2, .x6aa8
						str	sl, [r7]
						orr	r4, r4, #0xa30
						str	r1, [r3]
						ldr	r1, .x6aa4
						mov	r3, #0x2300000
						str	r0, [r4]
						ldr	r0, .x6aa0
						mov	r4, #VIDEO_BASE
						orr	r3, r3, #0x50
						orr	r4, r4, #0xa10
						str	r2, [lr]
						str	r3, [r1]
						str	r0, [r4]
						mov	r0, #0x4000
						ldr	lr, .x6a9c
						mov	r2, #0x4f0000
						ldr	r1, .gof_a18_add
						mov	r3, #0x20000
						orr	r0, r0, #0x44
						orr	r2, r2, #0x2c4
						orr	r3, r3, #0x284
						str	r2, [lr]
						ldr	r2, .gof_a04_add
						mov	r9, #VIDEO_BASE
						str	r3, [r1]
						orr	r9, r9, #0xa00
						ldr	r5, .gof_a1c_add
						mov	r3, #3
						str	r0, [r9]
						str	r3, [r2]
						mov	r2, #0x1e0000
						ldr	r1, .gof_a24_add
						ldr	r3, .x6a88
						mov	r4, #VIDEO_BASE
						mov	lr, #0x228000
						str	r2, [r5]
						ldr	r2, .x6a84
						orr	r4, r4, #0xa20
						orr	lr, lr, #0x1f
						mov	r0, #VIDEO_BASE
						orr	r0, r0, #0xa70
						str	lr, [r4]
						ldr	r4, .x6a80
						ldr	r6, .x6a7c
						str	r3, [r1]
						ldr	r3, .x6a78
						str	r2, [r0]
						mov	r2, #0x8000
						ldr	r5, .x6a74
						ldr	lr, .x6a70
						ldr	r0, .x6a6c
						ldr	r1, .x6a68
						str	r2, [r4]
						ldr	r2, .x6a64
						str	r3, [r6]
						mov	r3, #0x38000
						orr	r3, r3, #2
						str	lr, [r5]
						str	r1, [r0]
						str	r3, [r2]
						mov	r0, #VIDEO_BASE
						mov	r3, #0x3d0
						mov	lr, #VIDEO_BASE
						str	sl, [r7]
						orr	r0, r0, #0xaa0
						mov	r6, #0x208
						ldr	r4, .x6a60
						orr	r3, r3, #2
						str	sl, [r8]
						orr	lr, lr, #0xa60
						ldr	r5, .x6a5c
						mov	r2, #0x2000000
						str	r6, [r0]
						ldr	r0, .x6a58
						str	r3, [lr]
						mov	r1, #0xe00000
						mov	r3, #0x480000
						orr	r2, r2, #0x1c0
						orr	r1, r1, #0x1880
						orr	r3, r3, #0x410
						str	r2, [r4]
						ldr	r2, .gof_b04_val
						mov	lr, #VIDEO_BASE
						str	r1, [r5]
						ldr	r1, .gof_b04_add
						str	r3, [r0]
						mov	r0, #0xa0000
						orr	lr, lr, #0xb00
						ldr	r3, .gof_b08_add
						str	r0, [lr]
						str	r2, [r1]
						mov	r1, #0x3f
						mov	r0, #VIDEO_BASE
						str	r1, [r3]
						mov	r3, #0x3400000
						orr	r0, r0, #0xb10
						ldr	r2, .gof_b14_add
						ldr	r4, .gof_b18_add
						ldr	r1, .gof_b18_val
						ldr	lr, .gof_b1c_add
						str	r3, [r0]
						ldr	r0, .gof_b1c_val
						ldr	r5, .x6a34
						ldr	r3, .x6a30
						str	r5, [r2]
						ldr	r2, .x6a2c
						str	r1, [r4]
						mov	r1, #VIDEO_BASE
						str	r0, [lr]
						str	r3, [r2]
						mov	r3, #0x40000
						orr	r1, r1, #0xb20
						mov	lr, #VIDEO_BASE
						mov	r0, #0x100
						ldr	r2, .x6a28
						str	r3, [r1]
						ldr	r1, .x6a24
						orr	lr, lr, #0xb30
						orr	r0, r0, #1	
						mov	r3, #0xff00
						str	r0, [lr]
						ldr	lr, .x6a20
						orr	r3, r3, #0xf3
						mov	r0, #VIDEO_BASE
						ldr	r4, .x6a1c
						str	sl, [r2]
						str	r3, [r1]
						ldr	r1, .x6a18
						ldr	r3, .x6a14
						orr	r0, r0, #0xb40
						mov	r2, #0xbb0
						orr	r2, r2, #0xa
						str	sl, [r0]
						ldr	r0, .x6a10
						str	sl, [lr]
						str	r2, [r4]
						ldr	lr, .x6a0c
						str	r3, [r1]
						mov	r3, #0x2000
						ldr	r2, .x6a08
						mov	r1, #VIDEO_BASE
						str	r3, [r0]
						ldr	r3, .x6a04
						orr	r1, r1, #0xba0
						str	r5, [lr]
						str	sl, [r1]
						str	sl, [r2]
						mov	r0, #0x14
						str	fp, [r3]
						bl	highdelay
						ldr	r4, .x6a00
						ldr	r0, .x69fc
						ldr	lr, .VIDEO_BASE_0xbcc
						ldr	r2, .x69f4
						ldr	r3, .x69f0
						mov	r1, #VIDEO_BASE
						str	r0, [r4]
						orr	r1, r1, #0xbd0
						str	r2, [lr]
						ldr	r2, .x69ec
						str	r3, [r1]
						ldr	r3, .x69e8
						mov	r0, #0x28
						str	r3, [r2]
						ldr	r3, [r9]
						orr	r3, r3, #3
						str	r3, [r9]
						bl	highdelay
						pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
						mov	pc, lr

video_addresses:
.x69e8:				.word 	0x59809020
.x69ec:				.word 	VIDEO_BASE+0xbec
.x69f0:				.word  	0x44289104
.x69f4:				.word  	0x30257804

.VIDEO_BASE_0xbcc:	.word  	VIDEO_BASE+0xbcc    	@ orig 0x69f8
.x69fc:				.word  	0x45260010

.x6a00:				.word  	VIDEO_BASE+0xbc4
.x6a04:				.word  	VIDEO_BASE+0xb5c
.x6a08:				.word  	VIDEO_BASE+0xbac
.x6a0c:				.word  	VIDEO_BASE+0xb58

.x6a10:				.word  	VIDEO_BASE+0xb54
.x6a14:				.word  	0x04001541

.x6a18:				.word  	VIDEO_BASE+0xb48
.x6a1c:				.word  	VIDEO_BASE+0xb4c
.x6a20:				.word  	VIDEO_BASE+0xb44
.x6a24:				.word  	VIDEO_BASE+0xb3c
.x6a28:				.word  	VIDEO_BASE+0xb34
                 	
.x6a2c:				.word  	VIDEO_BASE+0xb2c
.x6a30:				.word  	0x537d2fca
.x6a34:				.word  	0x55555555
.gof_b1c_val:		.word  	0x50512a00
.gof_b1c_add:		.word  	VIDEO_BASE+0xb1c

.gof_b18_val:		.word  	0x28051005
.gof_b18_add:		.word  	VIDEO_BASE+0xb18

.gof_b14_add:		.word  	VIDEO_BASE+0xb14 	
.gof_b08_add:		.word  	VIDEO_BASE+0xb08 	

.gof_b04_add:		.word  	VIDEO_BASE+0xb04 	
.gof_b04_val:		.word  	0x04700202
       	
.x6a58:				.word  	VIDEO_BASE+0xabc
.x6a5c:				.word  	VIDEO_BASE+0xab8 	
.x6a60:				.word  	VIDEO_BASE+0xa64 	
.x6a64:				.word  	VIDEO_BASE+0xa28 	
.x6a68:				.word  	0x029801f3 	
.x6a6c:				.word  	VIDEO_BASE+0xa7c 	
.x6a70:				.word  	0x01cc0127 	
.x6a74:				.word  	VIDEO_BASE+0xa78 	
.x6a78:				.word  	0xc100c05b 	
.x6a7c:				.word  	VIDEO_BASE+0xa2c 	
.x6a80:				.word  	VIDEO_BASE+0xa74 	
.x6a84:				.word  	0x02bf01f3 	
.x6a88:				.word  	0xa127c05b 	
.gof_a24_add:		.word  	VIDEO_BASE+0xa24 	
.gof_a1c_add:		.word  	VIDEO_BASE+0xa1c 	
.gof_a04_add:		.word  	VIDEO_BASE+0xa04 	
.gof_a18_add:		.word  	VIDEO_BASE+0xa18 	
.x6a9c:				.word  	VIDEO_BASE+0xa14 	
.x6aa0:				.word  	0x02810002 	
.x6aa4:				.word  	VIDEO_BASE+0xa0c 	
.x6aa8:				.word  	0x027f0002 	
.x6aac:				.word  	VIDEO_BASE+0xa34 	
.x6ab0:				.word  	0x01df0050 	
.x6ab4:				.word  	VIDEO_BASE+0xa4c 	
.x6ab8:				.word  	VIDEO_BASE+0xa48 	
.x6abc:				.word  	0xaa432793 	
.x6ac0:				.word  	0x09244920 	
       	






#endif

gof_init_end:
#ifndef CONFIG_SKIP_RELOCATE_UBOOT
        @ jump to ram
        ldr   r1, =on_the_ram
        add  pc, r1, #0
        nop
        nop
1:  b   1b          @ infinite loop

on_the_ram:

#endif
		ldr	pc, _start_armboot

_start_armboot:	.word start_armboot


.xS3C24X0_GPADAT: 					.word S3C24X0_GPADAT
.xS3C24X0_GPADAT_val_0xfe000800:	.word 0xfe000800
.xS3C24X0_GPACON_0x005EA71F:		.word 0x005EA71F
.xS3C24X0_GPBUP: 					.word S3C24X0_GPBUP
.xS3C24X0_GPBUP_0x00001FFF:			.word 0x00001FFF
.xS3C24X0_GPBDAT: 					.word S3C24X0_GPBDAT
.xS3C24X0_GPBDAT_0x00000146:		.word 0x00000146
.xS3C24X0_GPBCON: 					.word S3C24X0_GPBCON
.xS3C24X0_GPBCON_0x00155455:		.word 0x00155455
.xS3C24X0_GPCUP: 					.word S3C24X0_GPCUP
.xS3C24X0_GPCUP_0x0000FFFF:			.word 0x0000FFFF
.xS3C24X0_GPCDAT: 					.word S3C24X0_GPCDAT
.xS3C24X0_GPCDAT_0x12:				.word 0x12
.xS3C24X0_GPCCON:					.word S3C24X0_GPCCON
.xS3C24X0_GPCCON_0x55551515:		.word 0x55551515
.xS3C24X0_GPDUP: 					.word S3C24X0_GPDUP
.xS3C24X0_GPDUP_0x0000EFFF:			.word 0x0000EFFF
.xS3C24X0_GPDCON: 					.word S3C24X0_GPDCON
.xS3C24X0_GPDCON_0x00001000: 		.word 0x00001000
.xS3C24X0_GPDDAT: 					.word S3C24X0_GPDDAT
.xS3C24X0_GPDDAT_0x05514514: 		.word 0x05514514
.xS3C24X0_GPEUP: 					.word S3C24X0_GPEUP
.xS3C24X0_GPEUP_0x0000FFFF: 		.word 0x0000FFFF
.xS3C24X0_GPEDAT: 					.word S3C24X0_GPEDAT

.xS3C24X0_GPECON: 					.word S3C24X0_GPECON
.xS3C24X0_GPECON_0x05555555: 		.word 0x05555555
.xS3C24X0_GPFUP: 					.word S3C24X0_GPFUP
.xS3C24X0_GPFUP_0xff: 				.word 0xff
.xS3C24X0_GPFDAT: 					.word S3C24X0_GPFDAT

.xS3C24X0_GPFCON: 					.word S3C24X0_GPFCON

.xS3C24X0_GPGUP: 					.word S3C24X0_GPGUP
.xS3C24X0_GPGUP_0x0000FFFF: 		.word 0x0000FFFF
.xS3C24X0_GPGDAT: 					.word S3C24X0_GPGDAT

.xS3C24X0_GPGCON: 					.word S3C24X0_GPGCON
.xS3C24X0_GPGCON_0x01150010: 		.word 0x01150010
.xS3C24X0_GPHUP: 					.word S3C24X0_GPHUP
.xS3C24X0_GPHUP_0x000007FF: 		.word 0x000007FF
.xS3C24X0_GPHDAT: 					.word S3C24X0_GPHDAT
.xS3C24X0_GPHDAT_0x200: 			.word 0x200
.xS3C24X0_GPHCON: 					.word S3C24X0_GPHCON
.xS3C24X0_GPHCON_0x0016faaa: 		.word 0x0016faaa
.xS3C24X0_GPJUP: 					.word S3C24X0_GPJUP
.xS3C24X0_GPJUP_0x00001FFF: 		.word 0x00001FFF
.xS3C24X0_GPJDAT: 					.word S3C24X0_GPJDAT
.xS3C24X0_GPJDAT_0x00001FFF: 		.word 0x00001FFF
.xS3C24X0_GPJCON: 					.word S3C24X0_GPJCON
.xS3C24X0_GPJCON_0x55555555: 		.word 0x55555555

.xS3C24X0_INTERRUPT_MASK: 			.word S3C24X0_INTERRUPT_MASK
.xS3C24X0_INTERRUPT_SUBMASK: 		.word S3C24X0_INTERRUPT_SUBMASK
.xS3C24X0_CLKDIVN: 					.word S3C24X0_CLKDIVN
.xS3C24X0_UPLLCON: 					.word S3C24X0_UPLLCON
.xS3C24X0_UPLLCON_0x0003C042: 		.word 0x0003C042
.xS3C24X0_CAMDIVN:					.word S3C24X0_CAMDIVN
.xS3C24X0_MPLLCON: 					.word S3C24X0_MPLLCON
.xS3C24X0_MPLLCON_0x0006e031:		.word 0x0006e031

@.align 0
/*
 *************************************************************************
 *
 * Interrupt handling
 *
 *************************************************************************
 */

@
@ IRQ stack frame.
@
#define S_FRAME_SIZE	72

#define S_OLD_R0	68
#define S_PSR		64
#define S_PC		60
#define S_LR		56
#define S_SP		52

#define S_IP		48
#define S_FP		44
#define S_R10		40
#define S_R9		36
#define S_R8		32
#define S_R7		28
#define S_R6		24
#define S_R5		20
#define S_R4		16
#define S_R3		12
#define S_R2		8
#define S_R1		4
#define S_R0		0

#define MODE_SVC 0x13
#define I_BIT	 0x80

/*
 * use bad_save_user_regs for abort/prefetch/undef/swi ...
 * use irq_save_user_regs / irq_restore_user_regs for IRQ/FIQ handling
 */
	.macro	bad_save_user_regs
	sub	sp, sp, #S_FRAME_SIZE
	stmia	sp, {r0 - r12}			@ Calling r0-r12
	@ldr	r2, _armboot_start
	mov	r2, #0
	sub	r2, r2, #(CONFIG_STACKSIZE+CFG_MALLOC_LEN)
	sub	r2, r2, #(CFG_GBL_DATA_SIZE+8)  @ set base 2 words into abort stack
	ldmia	r2, {r2 - r3}			@ get pc, cpsr
	add	r0, sp, #S_FRAME_SIZE		@ restore sp_SVC

	add	r5, sp, #S_SP
	mov	r1, lr
	stmia	r5, {r0 - r3}			@ save sp_SVC, lr_SVC, pc, cpsr
	mov	r0, sp
	.endm

	.macro	irq_save_user_regs
	sub	sp, sp, #S_FRAME_SIZE
	stmia	sp, {r0 - r12}			@ Calling r0-r12
	add     r8, sp, #S_PC
	stmdb   r8, {sp, lr}^                   @ Calling SP, LR
	str     lr, [r8, #0]                    @ Save calling PC
	mrs     r6, spsr
	str     r6, [r8, #4]                    @ Save CPSR
	str     r0, [r8, #8]                    @ Save OLD_R0
	mov	r0, sp
	.endm

	.macro	irq_restore_user_regs
	ldmia	sp, {r0 - lr}^			@ Calling r0 - lr
	mov	r0, r0
	ldr	lr, [sp, #S_PC]			@ Get PC
	add	sp, sp, #S_FRAME_SIZE
	subs	pc, lr, #4			@ return & move spsr_svc into cpsr
	.endm

	.macro get_bad_stack
	@ldr	r13, _armboot_start		@ setup our mode stack
	sub	r13, r13, #(CONFIG_STACKSIZE+CFG_MALLOC_LEN)
	sub	r13, r13, #(CFG_GBL_DATA_SIZE+8)	 @ reserved a couple spots in abort stack

	str	lr, [r13]			@ save caller lr / spsr
	mrs	lr, spsr
	str     lr, [r13, #4]

	mov	r13, #MODE_SVC			@ prepare SVC-Mode
	@ msr	spsr_c, r13
	msr	spsr, r13
	mov	lr, pc
	movs	pc, lr
	.endm

	.macro get_irq_stack			@ setup IRQ stack
	ldr	sp, IRQ_STACK_START
	.endm

	.macro get_fiq_stack			@ setup FIQ stack
	ldr	sp, FIQ_STACK_START
	.endm

/*
 * exception handlers
 */
	.align  5
undefined_instruction:
	get_bad_stack
	bad_save_user_regs
	bl 	do_undefined_instruction

	.align	5
software_interrupt:
	get_bad_stack
	bad_save_user_regs
	bl 	do_software_interrupt

	.align	5
prefetch_abort:
	get_bad_stack
	bad_save_user_regs
	bl 	do_prefetch_abort

	.align	5
data_abort:
	get_bad_stack
	bad_save_user_regs
	bl 	do_data_abort

	.align	5
not_used:
	get_bad_stack
	bad_save_user_regs
	bl 	do_not_used

#ifdef CONFIG_USE_IRQ

	.align	5
irq:
	get_irq_stack
	irq_save_user_regs
	bl 	do_irq
	irq_restore_user_regs

	.align	5
fiq:
	get_fiq_stack
	/* someone ought to write a more effiction fiq_save_user_regs */
	irq_save_user_regs
	bl 	do_fiq
	irq_restore_user_regs

#else

	.align	5
irq:
	get_bad_stack
	bad_save_user_regs
	bl 	do_irq

	.align	5
fiq:
	get_bad_stack
	bad_save_user_regs
	bl 	do_fiq

#endif

