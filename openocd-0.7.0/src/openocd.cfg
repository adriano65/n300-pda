echo "openocd.cfg --- start ---------------------------------------------"
#debug_level 3
debug_level 2

interface ftdi
ftdi_device_desc "Debug Board for Neo1973"
ftdi_vid_pid 0x1457 0x5118

ftdi_layout_init 0x0508 0x0f1b
ftdi_layout_signal nTRST -data 0x0200 -noe 0x0100 
ftdi_layout_signal nSRST -data 0x0800 -noe 0x0400                                                                                                    
#ftdi_layout_signal nNOR_WP -data 0x0010 -oe 0x0010

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME s3c2440
}

if { [info exists ENDIAN] } {
   set _ENDIAN $ENDIAN
} else {
  # this defaults to a bigendian
   set _ENDIAN little
}

if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   set _CPUTAPID 0x0032409d
}

#jtag scan chain
jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0x0f -expected-id $_CPUTAPID
#jtag newtap GoForce4000 cpu -irlen 4 -ircapture 0x1 -irmask 0x0f -expected-id 0x0032209d

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME arm920t -endian $_ENDIAN -chain-position $_TARGETNAME -variant arm920t

#$_TARGETNAME configure -work-area-phys 0x200000 -work-area-size 0x4000 -work-area-backup 1
#$_TARGETNAME configure -work-area-virt 0 -work-area-phys 0x32F00000 -work-area-size 0x40000 -work-area-backup 0
#$_TARGETNAME configure -work-area-phys 0x00000000 -work-area-size 0x4000 -work-area-backup 0
$_TARGETNAME configure -work-area-phys 0x00000F00 -work-area-size 0x100 -work-area-backup 0


echo "samsung_s3c2440.cfg ---- jtag configuration ----------------------------------------------------------"
#adapter_khz  42000
#adapter_khz  32000
#adapter_khz  16000
#adapter_khz 10000
#adapter_khz 5000
adapter_khz 3000
#adapter_khz 2000
#adapter_khz 1000
#adapter_khz 900
#adapter_khz 500
#adapter_khz 250
#adapter_khz 25
#adapter_khz 1
#jtag_rclk 3000

echo "openocd.cfg --- reset_config ---------------------------------------------"
#srst == system reset (SRTST Hardware signal)
#trst == Tap reset (reset just tap controllers connected to JTAG)
# can be none, trst_only, srst_only or trst_and_srst. 
reset_config none
#reset_config trst_only
#delay after asserting trst in ms (command valid any time)
jtag_ntrst_assert_width 5
#delay after deasserting trst in ms (command valid any time)
jtag_ntrst_delay 165
#jtag_ntrst_delay 100

#reset_config srst_only
#reset_config trst_and_srst
#reset_config trst_and_srst srst_pulls_trst

#adapter_nsrst_delay 1
#adapter_nsrst_delay 100
#adapter_nsrst_assert_width 1

echo "samsung_s3c2440.cfg --- nand defs ---------------------------------------------"
nand device 0 s3c2440 $_TARGETNAME 0x80000000
#nand device 0 s3c2440 $_TARGETNAME
#sleep 500

echo "openocd.cfg --- gdb - insight stuff ---------------------------------------------"
# --. on GDB set target extended-remote localhost:3333
#set remote hardware-breakpoint-limit 2
gdb_breakpoint_override soft
gdb_memory_map enable

echo "openocd.cfg --- init -> exec ---------------------------------------------"
init
echo "openocd.cfg --- exec -> exec ---------------------------------------------"

echo "openocd.cfg --- arm7_9 vector_catch ---------------------------------------------"
s3c2440.cpu arm9 vector_catch reset

echo "openocd.cfg --- arm7_9 dbgrq ---------------------------------------------"
arm7_9 dbgrq enable
#target_request debugmsgs enable

poll
sleep 1

#jtag arp_init

halt
wait_halt

# ????? command requires more arguments 
nand probe 0

#sleep 3000
#reset init

echo "samsung_s3c2440.cfg --- end ---------------------------------------------"



$_TARGETNAME configure -event reset-assert-pre {
	  echo "event reset-assert-pre ...";
	  #jtag arp_init
	  #soft_reset_halt
	  #myinit_2440;
}

$_TARGETNAME configure -event reset-assert {
	  echo "event reset-assert START";
	  #adapter_khz 4000;
	  #jtag_khz 1		#deprecated

	  #halt
	  echo "event reset-assert -- soft_reset_halt  ----------------------------------"
	  soft_reset_halt
	  echo "event reset-assert ------ disablig MMU (for physical DRAM memory access)"
	  arm920t cp15 2 0

	  echo "event reset-assert ------ set Supervisor state"
	  reg cpsr 0xa00000d3

	  #echo "event reset-assert ------ set System state"
	  #reg cpsr 0xa000001f

	  myinit_2440;


	  #echo "event reset-assert ------ set breakpoint @ 0x30008000"
	  #bp 0x30008000 4 hw
	  #echo "event reset-assert ------ set breakpoint @ 0x30008018"
	  #bp 0x30008018 4 hw
	  #echo "event reset-assert ------ set breakpoint after cache and MMU on"
	  #bp 0x300080b8 4 hw
	  #echo "event reset-assert ------ set breakpoint before uncompressing kernel"
	  #bp 0x3000afec 4 hw
	  #bp 0x30008814 4 hw
	  #bp 0x30008888 4 hw

	  #echo "event reset-assert ------ set breakpoint @ start kernel"
	  #bp 0xc00088ac 4 hw

	  #echo "event reset-assert ------ set breakpoint @ first prink after start kernel"
	  #bp 0xc00088f8 4 hw

	  echo "event reset-assert END.";
	  }

$_TARGETNAME configure -event reset-assert-post {
	  echo "event reset-assert-post";

	  # to be executed only when halted
	  #myinit_2440;

	  # speed up memory downloads
	  arm7_9 fast_memory_access enable
	  # --------------------------------------------- sometimes gives a download error
	  arm7_9 dcc_downloads enable

	  soft_reset_halt
}


proc myinit_2440 { } {
	  echo "myinit_2440 ------- start ----------------------"
	  #jtag arp_init
	  #soft_reset_halt
	  set _TARGETNAME s3c2440.cpu

	  set CAMDIVN		0x4C000018

	  set BANKCON1		0x48000008
	  set BANKCON2		0x4800000C
	  set BANKCON3		0x48000010
	  set BANKCON4		0x48000014
	  set BANKCON5		0x48000018

	  set UART0_CTL_BASE 0x50000000
	  set s [$_TARGETNAME curstate]
	  if { 0 == [string compare $s "halted" ] } {
		  #-----------------------------------------------
		  # Set Processor Clocks - N300 xtal=16.9344MHz
		  # we set main clock for 405MHz
		  # we set the USB Clock for 48mHz
		  # OM2 OM3 pulled to ground so main clock and
		  # usb clock are off 16mHz xtal
		  #-----------------------------------------------

		  echo "myinit_2440 ------- disable watchdog"
		  set WTCON			0x53000000
		  $_TARGETNAME mww phys $WTCON 0x00
		  echo "reset ------ disable interrupts"
		  set INTMSK		0x4A000008
		  $_TARGETNAME mww phys $INTMSK 0xFFFFFFFF
		  set INTSUBMSK		0x4A00001C
		  $_TARGETNAME mww phys $INTSUBMSK 0xffffffff

		  echo "myinit_2440 ------ changing bus"
		  arm mrc 15 0x00 1 0 0x00
		  #ORR r0, r0, #0xc0000000
		  reg r0 0xc0000000
		  #MCR p15, 0x00, r0, c1, c0, 0x00
		  arm mcr 15 0x00 1 0 0x00
					
		  echo "myinit_2440 ------ config Clock Divider"
		  set CLKDIVN		0x4C000014
		  $_TARGETNAME mww phys $CLKDIVN 0x00000007

		  echo "myinit_2440 ------ config USB clocks"
		  set UPLLCON		0x4C000008
		  $_TARGETNAME mww phys $UPLLCON 0x0003C042 
		  $_TARGETNAME mww phys $CAMDIVN 0x00000000
		  
		  echo "myinit_2440 ------ config MPLLCON clock"
		  set MPLLCON		0x4C000004
		  #$_TARGETNAME mww phys $MPLLCON 0x00074051
		  $_TARGETNAME mww phys $MPLLCON 0x0006e031

		  echo "myinit_2440 - BWSCON"
		  set BWSCON		0x48000000
		  #$_TARGETNAME mww phys $BWSCON 0x22111110 
		  #$_TARGETNAME mww phys $BWSCON 0x22121120
		  $_TARGETNAME mww phys $BWSCON 0x221E1120
		  
		  echo "myinit_2440 - BANKCON0 - ? NAND Flash"
		  set BANKCON0		0x48000004
		  mww phys $BANKCON0 0x00000700 
		  echo "myinit_2440 - BANKCON1 - ? NAND Flash"
		  mww phys $BANKCON1 0x00000700 
		  echo "myinit_2440 - BANKCON2 - ? NAND Flash"
		  mww phys $BANKCON2 0x00000700 

		  echo "myinit_2440 - BANKCON3 ?"
		  #$_TARGETNAME mww phys $BANKCON3 0x00001112 
		  $_TARGETNAME mww phys $BANKCON3 0x00000700 

		  echo "myinit_2440 - BANKCON6 DRAM"
		  set BANKCON6		0x4800001C
		  $_TARGETNAME mww phys $BANKCON6 0x00018009 

		  echo "myinit_2440 - BANKCON7 DRAM"
		  set BANKCON7		0x48000020
		  $_TARGETNAME mww phys $BANKCON7 0x00018009 

		  echo "myinit_2440 - REFRESH"
		  set REFRESH		0x48000024
		  #$_TARGETNAME mww phys $REFRESH 0x008E04EB 
		  #$_TARGETNAME mww phys $REFRESH 0x00ae04f5
		  # from smdk2440
		  $_TARGETNAME mww phys $REFRESH 0x00ac03f4

		  echo "myinit_2440 - BANKSIZE"
		  set BANKSIZE		0x48000028
		  $_TARGETNAME mww phys $BANKSIZE 0x000000B2

		  echo "myinit_2440 ------ MRSRB6 - DRAM"
		  #  MRSRB6 - DRAM
		  set MRSRB6		0x4800002C
		  $_TARGETNAME mww phys $MRSRB6 0x00000030 
		  #  MRSRB7 - DRAM			
		  set MRSRB7		0x48000030
		  $_TARGETNAME mww phys $MRSRB7 0x00000030 

		  echo "myinit_2440 - set BAUD divisor"
		  set UART0_UBRDIV  0x50000028
		  mww phys $UART0_UBRDIV 0x00000025
		  #mww phys $UART0_UBRDIV 0x00000019

		  echo "myinit_2440 - misccr"
		  set MISCCR		0x56000080
		  #mww phys $MISCCR 0x00010330
		  mww phys $MISCCR 0x00010020

		  echo "myinit_2440 - set NAND writable"
		  #set bit 12 of port A to 1:
		  # GPADAT |= (1 << 11)
		  set GPADAT     	0x56000004
		  #mww phys $GPADAT 0x00040800
		  mww phys $GPADAT 0x00000800
		  set GPACON     	0x56000000
		  #mww phys $GPACON 0x01fdf7ff
		  #mww phys $GPACON 0x01fdf71f
		  #mww phys $GPACON 0x01fdf73f
		  mww phys $GPACON 0x005EA71F
		  # ------------------------------------
		}
	  if { 0 != [string compare $s "halted" ] } {
		  echo "myinit_2440 - NOT HALTED !!!!!!!!!!!"
		}
}

proc flash_uboot { } {
# flash the u-Boot binary and reboot into it
	init_2440
	nand probe 0
	nand erase 0 0 0x20000
	nand write 0 /opt/N310/u-boot4n300/u-boot.bin 0 oob_softecc_kw
	resume
}


#------------------------------------------------
# Processor Initializalization
# Note: Processor writes can only occur when
# the state is in SYSTEM. When you call init_2440
# one of the first lines will tell you what state
# you are in. If a linux image is booting
# when you run this, it will not work
# a vivi boot loader will run with this just
# fine. The reg values were obtained by a combination
# of figuring them out from the manual, and looking
# at post vivi values with the debugger. Don't
# place too much faith in them, but seem to work.
#------------------------------------------------

proc init_2440 { } {

    halt
    soft_reset_halt
    s3c2440.cpu curstate

    #-----------------------------------------------
    # Set Processor Clocks - mini2440 xtal=12mHz
    # we set main clock for 405mHZ
    # we set the USB Clock for 48mHz
    # OM2 OM3 pulled to ground so main clock and
    # usb clock are off 12mHz xtal
    #-----------------------------------------------
   
    arm920t mww_phys 0x4C000014 0x00000005 #  Clock Divider control Reg
    arm920t mww_phys 0x4C000000 0xFFFFFFFF #  LOCKTIME count register
    arm920t mww_phys 0x4C000008 0x00038022 #  UPPLCON  USB clock config Reg
    arm920t mww_phys 0x4C000004 0x0007F021 #  MPPLCON  Proc clock config Reg
	
    #-----------------------------------------------
    # Configure Memory controller
    # BWSCON configures all banks, NAND, NOR, DRAM
    # DRAM - 64MB - 32 bit bus, uses BANKCON6 BANKCON7
    #-----------------------------------------------
	
    arm920t mww_phys 0x48000000 0x22111112 #  BWSCON - Bank and Bus Width
    arm920t mww_phys 0x48000004 0x00002f50 #  BANKCON0 - NOR Flash
    arm920t mww_phys 0x48000010 0x00001112 #  BANKCON3 - ?
    arm920t mww_phys 0x4800001c 0x00018009 #  BANKCON6 - DRAM	
    arm920t mww_phys 0x48000020 0x00018009 #  BANKCON7 - DRAM	
    arm920t mww_phys 0x48000024 0x008E04EB #  REFRESH  - DRAM		
    arm920t mww_phys 0x48000028 0x000000B2 #  BANKSIZE - DRAM		
    arm920t mww_phys 0x4800002C 0x00000030 #  MRSRB6 - DRAM		
    arm920t mww_phys 0x48000030 0x00000030 #  MRSRB7 - DRAM					
		
    #-----------------------------------------------
    # Now port configuration for enables for memory
    # and other stuff.
    #-----------------------------------------------
    
    arm920t mww_phys 0x56000000	0x007FFFFF #  GPACON
    
    arm920t mww_phys 0x56000010	0x00295559 #  GPBCON   
    arm920t mww_phys 0x56000018	0x000003FF #  GPBUP (PULLUP ENABLE)
    arm920t mww_phys 0x56000014	0x000007C2 #  GPBDAT   	    
    
    arm920t mww_phys 0x56000020	0xAAAAA6AA #  GPCCON   	
    arm920t mww_phys 0x56000028	0x0000FFFF #  GPCUP
    arm920t mww_phys 0x56000024	0x00000020 #  GPCDAT   	 	   	
    
    arm920t mww_phys 0x56000030	0xAAAAAAAA #  GPDCON   	
    arm920t mww_phys 0x56000038	0x0000FFFF #  GPDUP    
    
    arm920t mww_phys 0x56000040	0xAAAAAAAA #  GPECON   	
    arm920t mww_phys 0x56000048	0x0000FFFF #  GPEUP    
    
    arm920t mww_phys 0x56000050	0x00001555 #  GPFCON   	
    arm920t mww_phys 0x56000058	0x0000007F #  GPFUP    
    arm920t mww_phys 0x56000054	0x00000000 #  GPFDAT       
     
    arm920t mww_phys 0x56000060	0x00150114 #  GPGCON   	
    arm920t mww_phys 0x56000068	0x0000007F #  GPGUP        
 
    arm920t mww_phys 0x56000070	0x0015AAAA #  GPHCON  
    arm920t mww_phys 0x56000078	0x000003FF #  GPGUP       

}	



proc load_uboot { } {
    echo " "
    echo " "
    echo "----------------------------------------------------------"
    echo "---- Load U-Boot into RAM and execute it.              ---"
    echo "---- NOTE: loads, partially runs, and hangs            ---"
    echo "---- U-Boot is fine, this image runs from vivi.        ---"
    echo "---- I burned u-boot into NAND so I didn't finish      ---"
    echo "---- debugging it. I am leaving this here as it is     ---"
    echo "---- part of the way there if you want to fix it.      ---"
    echo "----                                                   ---"
    echo "---- mini2440 U-boot here:                             ---"
    echo "---- http://repo.or.cz/w/u-boot-openmoko/mini2440.git  ---"
    echo "---- Also this:                                        ---"
    echo "---- http://code.google.com/p/mini2440/wiki/MiniBringup --"
    echo "----------------------------------------------------------"      
  
	init_2440
	#load_image /tftpboot/u-boot-nand512.bin 0x33f80000 bin
	load_image /opt/N310/u-boot4n300/u-boot.bin 0x33f80000
	echo "Verifying image...."
	verify_image /tftpboot/u-boot-nand512.bin 0x33f80000 bin
	echo "jumping to u-boot"
    #bp 0x33f80068 4 hw
    reg 0 0
    reg 1 0
    reg 2 0
    reg 3 0
    reg 4 0x33f80000
  	resume 0x33f80000
}

# this may help a little bit debugging the load_uboot
proc s {} {
    step
    reg
    armv disassemble 0x33F80068 0x10
}


echo "openocd.cfg --- end ---------------------------------------------"


