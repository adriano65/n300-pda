dnl $Id: configure.in,v 1.14 2003/04/29 21:08:25 al-guest Exp $
dnl configure.in autoconf/automake input script
dnl for minicom
dnl

AC_INIT(src/minicom.c)
AC_CONFIG_AUX_DIR(aux)
AC_PREREQ(2.12)
AM_CONFIG_HEADER(config.h)

dnl Don't use '-' in version ! RPM doesn't like this.
AM_INIT_AUTOMAKE([minicom], [2.1])

dnl Checks for programs.
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AC_PROG_INSTALL
AC_PROG_RANLIB

AC_ISC_POSIX
AC_MINIX
AC_AIX
AM_PROG_CC_STDC

AC_ARG_ENABLE(music,
	[  --enable-music          Enable music for certain events (def: DISABLED)],
	if test "x$enable_music" != xyes; then
		feature_music="no"
	else
		feature_music="yes"
	fi,
	feature_music="no")

AC_ARG_ENABLE(history,
	[  --disable-history       Disable history buffer (def: enabled)],
	if test "x$enable_history" != xyes; then
		feature_history="no"
	else
		feature_history="yes"
	fi,
	feature_history="yes")

AC_ARG_ENABLE(history-search,
	[  --disable-history-search  Disable hist buf searching (def: enabled)],
	if test "x$enable_history_search" != xyes; then
		feature_history_search="no"
	else
		feature_history_search="yes"
	fi,
	feature_history_search="yes")

AC_ARG_ENABLE(socket,
	[  --disable-socket        Disable socket support (def: enabled)],
	if test "x$enable_socket" != xyes; then
		feature_socket="no"
	else
		feature_socket="yes"
	fi,
	feature_socket="yes")

AC_ARG_ENABLE(fkey-macros,
	[  --disable-fkey-macros   Disable F-Key macros (def: enabled)],
	if test "x$enable_fkey_macros" != xyes; then
		feature_fkey_macros="no"
	else
		feature_fkey_macros="yes"
	fi,
	feature_fkey_macros="yes")

AC_ARG_ENABLE(rh-fkey-fix,
	[  --enable-rh-fkey-fix    Enable fix for RedHat 4.1 F-keys
			  (def: DISABLED)],
	if test "x$enable_rd_fkey_fix" = "xyes"; then
		AC_DEFINE(_RH_FIX)
	fi)

AC_ARG_ENABLE(lock-dir,
	[  --enable-lock-dir=DIR   Set com line lock directory
			  (def: try common locations)],
	if test "x$enable_lock_dir" = xyes; then
		UUCPLOCK=""
	else
		if test "x$enable_lock_dir" = xno; then
			AC_MSG_ERROR(Lock directory required)
		else
			UUCPLOCK="$enable_lock_dir"
		fi
	fi,
	UUCPLOCK="")

AC_ARG_ENABLE(dfl-port,
	[  --enable-dfl-port=DEVFILE  Set default /dev/.. modem device
			  (def: try common locations)],
	if test "x$enable_dfl_port" = xyes; then
		DFL_PORT=""
	else
		if test "x$enable_dfl_port" = xno; then
			AC_MSG_ERROR(Default port required)
		else
			DFL_PORT="$enable_dfl_port"
		fi
	fi,
	DFL_PORT="")

AC_ARG_ENABLE(dfl-baud,
	[  --enable-dfl-baud=NNNNN Set default baud rate
			  (def: 38400)],
	if test "x$enable_dfl_baud" = xyes; then
		DEF_BAUD="38400"
	else
		if test "x$enable_dfl_baud" = xno; then
			AC_MSG_ERROR(Default baud rate required)
		else
			DEF_BAUD="$enable_dfl_baud"
		fi
	fi,
	DEF_BAUD="38400")

AC_ARG_ENABLE(cfg-dir,
	[  --enable-cfg-dir=DIR    Set minicom cfg file path (def: sysconfdir)],
	if test "x$enable_cfg_dir" = xyes; then
		MINICOM_CONFDIR="$sysconfdir"
	else
		if test "x$enable_cfg_dir" = xno; then
			AC_MSG_ERROR(Config directory required)
		else
			MINICOM_CONFDIR="$enable_cfg_dir"
		fi
	fi,
	MINICOM_CONFDIR="$sysconfdir")

AC_ARG_ENABLE(kermit,
	[  --enable-kermit=FILE    Set default path to kermit (def: search PATH)],
	if test "x$enable_kermit" = xyes; then
		PATH_KERMIT=""
	else
		if test "x$enable_kermit" = xno; then
			PATH_KERMIT=""
		else
			PATH_KERMIT="$enable_kermit"
		fi
	fi,
	PATH_KERMIT="")

AC_ARG_ENABLE(dgux,
	[  --enable-dgux           Enable DG/UX extensions (def: DISABLED)],
	if test "x$enable_dgux" = xyes; then
		AC_DEFINE(_DGUX_SOURCE)
	fi)

AC_ARG_ENABLE(hpux,
	[  --enable-hpux           Enable HP/UX extensions (def: DISABLED)],
	if test "x$enable_hpux" = xyes; then
		AC_DEFINE(_HPUX_SOURCE)
	fi)

if test "x$feature_history" = xyes; then
	AC_DEFINE(_HISTORY)
	AC_DEFINE(HISTORY)

	if test "x$feature_history_search" = xyes; then
		AC_DEFINE(_SEARCH_HISTORY)
	fi
fi

if test "x$feature_fkey_macros" = xyes; then
	AC_DEFINE(_HAVE_MACROS)
fi

if test "x$feature_music" = xyes; then
	AC_DEFINE(VC_MUSIC)
fi

if test "x$feature_socket" = xyes; then
	AC_DEFINE(USE_SOCKET)
fi

dnl Set of available languages.
ALL_LINGUAS="cs es fr fi hu ja pl pt_BR ru"

dnl Checks for programs.
AM_GNU_GETTEXT
test "x$USE_INCLUDED_LIBINTL" = xyes && CFLAGS="$CFLAGS -I\$(top_srcdir)/intl"

if test "x$enable_kermit" != xno && test "x$PATH_KERMIT" = x
then
AC_PATH_PROG(PATH_KERMIT, kermit, no, $PATH:/bin:/usr/bin:/usr/local/bin:/opt/gnu/bin)
else
	AC_MSG_CHECKING(manual Kermit setting)
	AC_MSG_RESULT($PATH_KERMIT)
fi
if test "x$PATH_KERMIT" = x -o "x$PATH_KERMIT" = xno
then
	AC_DEFINE(KERMIT, "")
else
	AC_DEFINE_UNQUOTED(KERMIT, "$PATH_KERMIT -l %l -b %b")
fi


# Some GNU/Linux systems (e.g., SuSE 4.3, 1996) don't have curses, but
# rather ncurses.  So we check for it.
TERMLIBS=
for termlib in tinfo ncurses curses termcap terminfo termlib ; do
   AC_CHECK_LIB(${termlib}, tputs,
     [TERMLIBS="${TERMLIBS} -l${termlib}"; break])
done

LIBS="$LIBS $TERMLIBS"

if test "x$gt_cv_func_gettext_libc" != xyes
then
	if test "x$nls_cv_force_use_gnu_gettext" != xyes
	then
		AC_CHECK_LIB(intl, gettext)
	fi
fi

dnl Checks for header files.
dnl Do not use <ncurses/termcap.h> unless we're linking with ncurses.
if test "x$termlib" = xncurses; then
  dnl Use AC_CHECK_HEADERS so the HAVE_*_H symbol gets defined.
  AC_CHECK_HEADERS(ncurses/termcap.h)
fi

AC_CHECK_LIB(socket, socket)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_HEADER_STAT
AC_HEADER_TIME

AM_SYS_POSIX_TERMIOS
AM_HEADER_TIOCGWINSZ_NEEDS_SYS_IOCTL
if test $am_cv_sys_posix_termios = yes; then
  AC_DEFINE(POSIX_TERMIOS)
fi

AC_CHECK_HEADERS(stdarg.h varargs.h termcap.h termio.h termios.h \
	setjmp.h errno.h pwd.h signal.h fcntl.h sgtty.h locale.h \
	sys/ptem.h sys/stat.h sys/file.h sys/ioctl.h sys/time.h \
	sys/ttold.h sys/param.h unistd.h posix1_lim.h sgtty.h features.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AM_C_PROTOTYPES
AC_TYPE_UID_T
AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_STRUCT_TM

dnl Checks for library functions.
AC_TYPE_SIGNAL
AM_FUNC_ERROR_AT_LINE
AC_FUNC_CLOSEDIR_VOID
AM_WITH_DMALLOC
AC_CHECK_FUNCS(getcwd getwd strerror strstr vsnprintf vprintf)
AC_CHECK_FUNC(select,
	AC_DEFINE(HAVE_SELECT)
	KEYSERV="",
	KEYSERV="minicom.keyserv")
AC_SUBST(KEYSERV)
AC_REPLACE_FUNCS(snprintf usleep getopt getopt_long)

dnl system capabilities
AC_SYS_LONG_FILE_NAMES

dnl ---------------------------------------------------------------

AC_MSG_CHECKING(for com line lock directory)

if test "x$UUCPLOCK" != x
then
	if test -d $UUCPLOCK
	then
		AC_MSG_RESULT($UUCPLOCK)
		AC_DEFINE_UNQUOTED(UUCPLOCK, "$UUCPLOCK")
	else
		UUCPLOCK=""
	fi
fi

if test "x$UUCPLOCK" = x
then
	UUCPLOCK=/etc/locks
	if test -d $UUCPLOCK
	then
		AC_MSG_RESULT($UUCPLOCK)
		AC_DEFINE_UNQUOTED(UUCPLOCK, "$UUCPLOCK")
	else
		UUCPLOCK=""
	fi
fi

if test "x$UUCPLOCK" = x
then
	UUCPLOCK=/var/lock
	if test -d $UUCPLOCK
	then
		AC_MSG_RESULT($UUCPLOCK)
		AC_DEFINE_UNQUOTED(UUCPLOCK, "$UUCPLOCK")
	else
		UUCPLOCK=""
	fi
fi

if test "x$UUCPLOCK" = x
then
	UUCPLOCK=/usr/spool/locks
	if test -d $UUCPLOCK
	then
		AC_MSG_RESULT($UUCPLOCK)
		AC_DEFINE_UNQUOTED(UUCPLOCK, "$UUCPLOCK")
	else
		UUCPLOCK=""
	fi
fi

if test "x$UUCPLOCK" = x
then
	UUCPLOCK=/var/spool/locks
	if test -d $UUCPLOCK
	then
		AC_MSG_RESULT($UUCPLOCK)
		AC_DEFINE_UNQUOTED(UUCPLOCK, "$UUCPLOCK")
	else
		UUCPLOCK=""
	fi
fi

if test "x$UUCPLOCK" = x
then
	UUCPLOCK=/var/spool/lock
	if test -d $UUCPLOCK
	then
		AC_MSG_RESULT($UUCPLOCK)
		AC_DEFINE_UNQUOTED(UUCPLOCK, "$UUCPLOCK")
	else
		UUCPLOCK=""
	fi
fi

if test "x$UUCPLOCK" = x
then
	UUCPLOCK=/usr/spool/uucp
	if test -d $UUCPLOCK
	then
		AC_MSG_RESULT($UUCPLOCK)
		AC_DEFINE_UNQUOTED(UUCPLOCK, "$UUCPLOCK")
	else
		UUCPLOCK=""
	fi
fi

if test "x$UUCPLOCK" = x
then
	UUCPLOCK=/var/spool/uucp
	if test -d $UUCPLOCK
	then
		AC_MSG_RESULT($UUCPLOCK)
		AC_DEFINE_UNQUOTED(UUCPLOCK, "$UUCPLOCK")
	else
		UUCPLOCK=""
	fi
fi

if test "x$UUCPLOCK" = x
then
	AC_MSG_ERROR(No suitable lock directory)
fi

dnl ---------------------------------------------------------------

AC_MSG_CHECKING(for default serial port device)

if test "x$DFL_PORT" != x
then
	if test -c $DFL_PORT
	then
		AC_MSG_RESULT($DFL_PORT)
		AC_DEFINE_UNQUOTED(DFL_PORT, "$DFL_PORT")
	else
		DFL_PORT=""
	fi
fi

if test "x$DFL_PORT" = x
then
	DFL_PORT=/dev/modem
	if test -c $DFL_PORT
	then
		AC_MSG_RESULT($DFL_PORT)
		AC_DEFINE_UNQUOTED(DFL_PORT, "$DFL_PORT")
	else
		DFL_PORT=""
	fi
fi

if test "x$DFL_PORT" = x
then
	DFL_PORT=/dev/cua/b
	if test -c $DFL_PORT
	then
		AC_MSG_RESULT($DFL_PORT)
		AC_DEFINE_UNQUOTED(DFL_PORT, "$DFL_PORT")
	else
		DFL_PORT=""
	fi
fi

if test "x$DFL_PORT" = x
then
	DFL_PORT=/dev/cua2p0
	if test -c $DFL_PORT
	then
		AC_MSG_RESULT($DFL_PORT)
		AC_DEFINE_UNQUOTED(DFL_PORT, "$DFL_PORT")
	else
		DFL_PORT=""
	fi
fi

if test "x$DFL_PORT" = x
then
	DFL_PORT=/dev/ttyS1
	if test -c $DFL_PORT
	then
		AC_MSG_RESULT($DFL_PORT)
		AC_DEFINE_UNQUOTED(DFL_PORT, "$DFL_PORT")
	else
		DFL_PORT=""
	fi
fi

if test "x$DFL_PORT" = x
then
	DFL_PORT=/dev/com0
	if test -c $DFL_PORT
	then
		AC_MSG_RESULT($DFL_PORT)
		AC_DEFINE_UNQUOTED(DFL_PORT, "$DFL_PORT")
	else
		DFL_PORT=""
	fi
fi

if test "x$DFL_PORT" = x
then
	DFL_PORT=/dev/tty01
	if test -c $DFL_PORT
	then
		AC_MSG_RESULT($DFL_PORT)
		AC_DEFINE_UNQUOTED(DFL_PORT, "$DFL_PORT")
	else
		DFL_PORT=""
	fi
fi

if test "x$DFL_PORT" = x
then
	DFL_PORT=/dev/tty8
	if test -c $DFL_PORT
	then
		AC_MSG_RESULT($DFL_PORT)
		AC_DEFINE_UNQUOTED(DFL_PORT, "$DFL_PORT")
	else
		DFL_PORT=""
	fi
fi

if test "x$DFL_PORT" = x
then
	DFL_PORT=/dev/modem
	AC_DEFINE_UNQUOTED(DFL_PORT, "$DFL_PORT")
fi

dnl ---------------------------------------------------------------

AC_MSG_CHECKING(for default baud rate)

tmp_match=no
for tmp_baud_rate in 300 1200 2400 4800 9600 19200 38400 57600 115200 230400
do
	if test "x$DEF_BAUD" = "x$tmp_baud_rate"
	then
		tmp_match=yes
		AC_DEFINE_UNQUOTED(DEF_BAUD, "$DEF_BAUD")
		AC_MSG_RESULT($DEF_BAUD)
	fi
done

if test "x$tmp_match" != xyes
then
	AC_MSG_ERROR(No suitable default baud rate)
fi

if test "x$ac_cv_header_getopt_h" = xno
then
	CFLAGS="$CFLAGS -I\$(top_srcdir)/lib"
fi

# this is a hack, if we need getopt_long we also need getopt
# but I don't know how to express that dependency in lib/Makefile.am
AC_SUBST(LIBPORT_GETOPT_LONG_DEP)
if test "x$ac_cv_func_getopt_long" = xno
then
	LIBPORT_GETOPT_LONG_DEP="getopt.o"
fi

dnl ---------------------------------------------------------------

dnl minicom config file directory
AC_DEFINE_DIR(CONFDIR, MINICOM_CONFDIR)

dnl locale base directory, off of arch-independent data dir
localedir="$datadir/locale"
AC_DEFINE_DIR(LOCALEDIR, localedir)

AC_OUTPUT(Makefile \
	doc/Makefile \
	extras/Makefile \
	extras/linux/Makefile \
	extras/tables/Makefile \
	extras/termcap/Makefile \
	extras/terminfo/Makefile \
	man/Makefile \
	po/Makefile.in \
	intl/Makefile \
	lib/Makefile \
	src/Makefile \
	minicom.spec)

